
# storage.yaml
---
- name: Install required packages
  ansible.builtin.apt:
    name:
      - zfsutils-linux
      - samba
      - nfs-kernel-server
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Get mount information
  ansible.builtin.shell: |
    mount | grep "{{ zfs_pool_name }}" || true
  register: mount_info
  changed_when: false
  ignore_errors: true

- name: Remove ZFS filesystems if mounted
  ansible.builtin.shell: |
    zfs umount -f {{ zfs_pool_name }} || true
    zfs umount -f {{ zfs_pool_name }}/* || true
  when: mount_info.stdout != ""
  ignore_errors: true

- name: Force cleanup existing directory
  ansible.builtin.shell: |
    rm -rf "/{{ zfs_pool_name }}"
  args:
    removes: "/{{ zfs_pool_name }}"
  ignore_errors: true

- name: Check for existing ZFS pool
  ansible.builtin.command:
    cmd: zpool list -H -o name {{ zfs_pool_name }}
  register: pool_check
  changed_when: false
  failed_when: false

- name: Export existing pool if found
  ansible.builtin.command:
    cmd: zpool export -f {{ zfs_pool_name }}
  when: pool_check.rc == 0
  ignore_errors: true

- name: Wipe filesystem signatures from disks
  ansible.builtin.command:
    cmd: "wipefs -a {{ item }}"
  loop: "{{ disks }}"
  when: confirm_wipe == 'yes'
  ignore_errors: true

- name: Clear partition tables
  ansible.builtin.command:
    cmd: "sgdisk --zap-all {{ item }}"
  loop: "{{ disks }}"
  when: confirm_wipe == 'yes'
  ignore_errors: true

- name: Create ZFS pool
  ansible.builtin.command:
    cmd: "zpool create -f {{ zfs_pool_name }} mirror {{ disks | join(' ') }} -o ashift=12 -o autoexpand=on -o autotrim=on -o feature@zstd_compress=enabled"
  when: pool_check.rc != 0
  register: pool_create

- name: Verify pool exists
  ansible.builtin.command:
    cmd: "zpool list {{ zfs_pool_name }}"
  register: pool_exists
  changed_when: false
  failed_when: false

- name: Debug pool status
  ansible.builtin.debug:
    msg: "Pool status: {{ pool_exists }}"

- name: Create datasets if pool exists
  ansible.builtin.shell: |
    if zpool list {{ zfs_pool_name }} > /dev/null 2>&1; then
      zfs create \
        -o quota={{ item.extra_zfs_properties.quota }} \
        -o compression={{ item.extra_zfs_properties.compression }} \
        -o recordsize={{ item.extra_zfs_properties.recordsize }} \
        -o sync={{ item.extra_zfs_properties.sync }} \
        {{ zfs_pool_name }}/{{ item.name }} || \
      zfs set \
        quota={{ item.extra_zfs_properties.quota }} \
        compression={{ item.extra_zfs_properties.compression }} \
        recordsize={{ item.extra_zfs_properties.recordsize }} \
        sync={{ item.extra_zfs_properties.sync }} \
        {{ zfs_pool_name }}/{{ item.name }}
    fi
  loop: "{{ datasets }}"
  register: dataset_creation
  failed_when: false

- name: Ensure NFS export directories exist with correct permissions
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: '0777'
    owner: nobody
    group: nogroup
  loop: "{{ nfs_exports }}"
  when: pool_exists.rc == 0

- name: Backup existing exports file
  ansible.builtin.copy:
    src: /etc/exports
    dest: /etc/exports.backup
    remote_src: yes
    force: yes
  ignore_errors: yes

- name: Configure NFS exports
  ansible.builtin.lineinfile:
    path: /etc/exports
    line: "{{ item.path }} {{ item.clients }}"
    create: yes
  loop: "{{ nfs_exports }}"
  when: pool_exists.rc == 0

- name: Verify NFS export paths exist
  ansible.builtin.stat:
    path: "{{ item.path }}"
  loop: "{{ nfs_exports }}"
  register: nfs_paths
  when: pool_exists.rc == 0

- name: Safely reload NFS exports
  ansible.builtin.shell: |
    exportfs -ua
    sleep 2
    exportfs -ra
  when: pool_exists.rc == 0
  register: reload_result
  failed_when: false

- name: Ensure services are running
  ansible.builtin.service:
    name: "{{ item }}"
    state: restarted
    enabled: yes
  loop:
    - smbd
    - nmbd
    - nfs-kernel-server
  when: pool_exists.rc == 0
